#!/usr/bin/env perl
use 5.20.0;
use warnings;
use feature 'signatures';
no warnings 'experimental::signatures';
use File::Temp;
use JSON::PP;
use Time::Piece;

sub with_timestamp :prototype($) ($msg) {
    $msg =~ s/^/(localtime->datetime) . "\t"/egm;
    return $msg;
}

sub load :prototype($) ($file) {
    if (!-f $file) {
        return
    }
    open my $fh, '<', $file
        or die with_timestamp "failed to load $file: $!";
    local $/;
    <$fh>;
}

sub safe_system :prototype($) ($cmd) {
    my $stderr_file = File::Temp->new->filename;
    chomp(my $stdout = `$cmd 2> $stderr_file`);
    my $stderr = load $stderr_file;
    die with_timestamp "failed to execute: $cmd\n$stderr" if $? != 0 || $stderr;
    $stdout;
}

sub parse :prototype($) ($output) {
    my $result = +{};
    my $inside;
    for (split "\n", $output) {
        if (/^\s*\{/) {
            # This is the start
        } elsif (/^\s*(\w+)\s*=\s*\{/) {
            (my $key = lcfirst $1) =~ s/ID/Id/;
            $result->{lcfirst $1} = $inside = +{};
        } elsif (/^\s*\};/) {
            undef $inside;
        } elsif (/"?(\w+)"?\s*=\s*"?(.*?)"?;/) {
            my ($key, $value) = ($1, $2);
            ($key = lcfirst $key) =~ s/ID/Id/;
            my $first = 1;
            $key =~ s/_([[:alpha:]]+)/
                if ($first) {
                    $first = 0;
                    $1;
                } else {
                    ucfirst $1;
                }
            /eg;
            $value += 0 if $value =~ /^-?\d+$/;
            if ($inside) {
                $inside->{$key} = $value;
            } else {
                $result->{$key} = $value;
            }
        } elsif (/^\s*}/) {
            # This is the end
            return $result;
        }
    }
    $result;
}

sub commify :prototype($) ($text) {
    $text = reverse $text;
    $text =~ s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;
    scalar reverse $text;
}

sub get :prototype($$;$) ($hash, $key, $default = undef) {
    exists $hash->{$key} ? $hash->{$key} : $default;
}

sub readableBytes :prototype($) ($bytes) {
    if ($bytes >= 1e12) {
        substr(commify $bytes / 1e12, 0, 5) . 'TB';
    } elsif ($bytes >= 1e9) {
        substr(commify $bytes / 1e9, 0, 5) . 'GB';
    } elsif ($bytes >= 1e6) {
        substr(commify $bytes / 1e6, 0, 5) . 'MB';
    } elsif ($bytes >= 1e3) {
        substr(commify $bytes / 1e3, 0, 5) . 'KB';
    } else {
        substr(commify $bytes, 0, 5) . 'KB';
    }
}

sub arrange :prototype($) ($result) {
    if (defined(my $v = get $result, 'dateOfStateChange')) {
        my $t = localtime(Time::Piece->strptime($v, '%Y-%m-%d %T %z')->epoch);
        $result->{dateOfStateChangeFormatted} = $t->strftime('%F %T %z');
    }
    my $p = get $result, 'progress', +{};
    if (defined(my $v = get $p, 'bytes')) {
        $p->{bytesFormatted} = substr(commify $v / 1e9, 0, 4) . ' GB';
    }
    if (defined(my $v = get $p, 'timeRemaining')) {
        my $formatted;
        if ($v > 3600 * 24) {
            $formatted = sprintf '%dd %dh %dm %ds',
                int($v / 3600 * 24), int($v % (3600 * 24) / 3600),
                int(($v % (3600 * 24)) % 3600 / 60), $v % 60;
        } elsif ($v > 3600) {
            $formatted = sprintf '%dh %dm %ds',
                int($v / 3600), int($v % 3600 / 60), $v % 60;
        } else {
            $formatted = sprintf '%dm %ds', int($v / 60), $v % 60;
        }
        $p->{timeRemainingFormatted} = $formatted;
    }
    if (defined(my $v = get $p, 'totalBytes')) {
        $p->{totalBytesFormatted} = substr(commify $v / 1e9, 0, 5) . 'GB';
    }
    $result;
}

sub process {
    my $out = safe_system 'tmutil status';
    my $result = parse $out;
    my $arranged = arrange $result;
    print JSON::PP->new->canonical(1)->encode($arranged);
}

process if __FILE__ eq $0;

1;

__END__
# sample JSON

{
  "backupPhase": "Copying",
  "clientID": "com.apple.backupd",
  "dateOfStateChange": "2020-11-29 08:38:40 +0000",
  "destinationID": "18E167B2-EA8C-4847-AD6A-84780BD58AB2",
  "progress": {
    "bytes": 15740062375,
    "files": 53588,
    "percent": "0.5366037135411036",
    "rawPercent": "0.5366037135411036",
    "rawTotalBytes": 29332749621,
    "timeRemaining": 1675,
    "totalBytes": 29332749621,
    "totalFiles": 53588
  },
  "running": 1,
  "stopping": 0
}
