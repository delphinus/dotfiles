[[plugins]]
repo        = 'Shougo/deoplete.nvim'
on_event    = ['InsertEnter']
depends     = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = ''' "{{{
  let g:deoplete#enable_at_startup = 1
  inoremap <silent> <expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ deoplete#manual_complete()
  inoremap <silent> <expr> <S-TAB>
        \ pumvisible() ? "\<C-p>" :
        \ <SID>check_back_space() ? "\<S-TAB>" :
        \ deoplete#manual_complete()
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
  endfunction
"}}} '''
hook_post_source = ''' "{{{
  call deoplete#custom#source('_', 'converters', [
        \ 'converter_auto_paren',
        \ 'converter_remove_overlap',
        \ 'converter_truncate_abbr',
        \ 'converter_truncate_menu',
        \ ])
  call deoplete#custom#source('ale', {
        \ 'dup': v:true,
        \ 'max_menu_width': 0,
        \ })
  call deoplete#custom#source('look', 'rank', 0)
  call deoplete#custom#source('denite', 'rank', 300)
  call deoplete#custom#option({
        \ 'camel_case': v:true,
        \ 'candidate_marks': ['⌥1', '⌥2', '⌥3', '⌥4', '⌥5'],
        \ 'ignore_sources': {
        \   'denite-filter': ['ghq', 'look'],
        \   'perl': ['ale'],
        \ },
        \ 'omni_patterns': {
        \   'go': '[^. *\t]\.\w*',
        \ }})
  call deoplete#custom#option('keyword_patterns', {'denite-filter': '[\w.-]*'})
  call deoplete#custom#var('terminal', 'require_same_tab', v:false)
  function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
  endfunction
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  " Map ⌥ 1〜⌥ 5 for candidate marks
  inoremap <expr> <A-1> pumvisible() ? deoplete#insert_candidate(0) : "\<A-1>"
  inoremap <expr> <A-2> pumvisible() ? deoplete#insert_candidate(1) : "\<A-2>"
  inoremap <expr> <A-3> pumvisible() ? deoplete#insert_candidate(2) : "\<A-3>"
  inoremap <expr> <A-4> pumvisible() ? deoplete#insert_candidate(3) : "\<A-4>"
  inoremap <expr> <A-5> pumvisible() ? deoplete#insert_candidate(4) : "\<A-5>"
  call deoplete#initialize()
"}}} '''
hook_post_update = '!pip3 install -U --user neovim'

# TODO: use this only on Neovim lsp version
[[plugins]]
repo      = 'Shougo/deoplete-lsp'
on_source = ['deoplete.nvim']
if        = 'exists("*luaeval") && luaeval("vim.lsp ~= nil")'
hook_add  = ''' "{{{
  call lsp#add_server_config('python', { 'execute_path': 'pyls', 'args': [] }, {})
  call lsp#add_server_config('go', { 'execute_path': 'gopls', 'args': [] }, {})
  call lsp#add_server_config('typescript', { 'execute_path': 'tsserver', 'args': []}, {})
"}}} '''

[[plugins]]
repo      = 'Shougo/deoplete-terminal'
on_source = ['deoplete.nvim']

[[plugins]]
repo      = 'Shougo/echodoc.vim'
on_source = ['deoplete.nvim']
hook_source = ''' "{{{
  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'floating'
"}}} '''

[[plugins]]
repo      = 'Shougo/neoinclude.vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo      = 'Shougo/neopairs.vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo      = 'Shougo/neco-syntax'
on_source = ['deoplete.nvim']

[[plugins]]
repo  = 'Shougo/neco-vim'
on_ft = ['vim']

[[plugins]]
repo    = 'carlitux/deoplete-ternjs'
on_ft   = ['javascript']
hook_post_update = '''
  !npm install -g tern
'''
hook_source = '''
  let g:deoplete#sources#ternjs#types = 1
  let g:deoplete#sources#ternjs#depths = 1
  let g:deoplete#sources#ternjs#docs = 1
'''

[[plugins]]
repo      = 'delphinus/deoplete-ghq'
on_source = ['deoplete.nvim']

[[plugins]]
repo      = 'dense-analysis/ale'
on_source = ['deoplete.nvim']
on_cmd    = ['ALE']
on_map    = ['<Plug>(ale-']
on_ft     = [
  'go',
  'javascript',
  'json',
  'perl',
  'python',
  'ruby',
  'typescript',
  'vim',
  'vue',
]
#repo     = 'delphinus/ale'
#rev      = 'feature/detect-note-in-mypy'
hook_add = ''' "{{{
  let g:ale_fix_on_save = 1
  let g:ale_echo_msg_format = '%severity%  %linter% - %s'
  let g:ale_echo_msg_error_str = "\u25b8" " '▸'
  let g:ale_echo_msg_warning_str = "\u25b9" " '▹'
  let g:ale_echo_msg_info_str = "\u25b4" " '▴'
  let g:ale_sign_error =  "\u25b8" " '▸'
  let g:ale_sign_warning =  "\u25b9" " '▹'
  let g:ale_statusline_format = ["\u25b8 %d", "\u25b9 %d", "\u25b4 "] " ▸, ▹, ▴
  let g:ale_sign_column_always = 1
  let g:ale_sign_highlight_linenrs = 1
  let g:ale_virtualtext_cursor = 1
  let g:ale_virtualtext_prefix = '‣ '
  let g:ale_fixers = {
        \ 'javascript': [ 'eslint' ],
        \ 'json': [ 'eslint' ],
        \ 'python': [ 'black' ],
        \ 'ruby': [ 'rubocop' ],
        \ 'typescript': [ 'eslint' ],
        \ }
  " TODO: Use Neovim lsp feature
  if exists('*luaeval') && luaeval('vim.lsp ~= nil')
    let g:ale_linters = {
          \ 'go': [ 'golangci-lint' ],
          \ 'javascript': [ 'eslint' ],
          \ 'json': [ 'eslint' ],
          \ 'typescript': [ 'eslint' ],
          \ 'perl': [ 'perl' ],
          \ 'python': [ 'mypy' ],
          \ 'sh': [ 'shellcheck' ],
          \ 'vim': [ 'vint' ],
          \ }
  " TODO: Use ALE lsp feature
  else
    let g:ale_linters = {
          \ 'go': [ 'golangci-lint', 'gopls' ],
          \ 'javascript': [ 'eslint' ],
          \ 'json': [ 'eslint' ],
          \ 'typescript': [ 'eslint', 'tsserver' ],
          \ 'perl': [ 'perl' ],
          \ 'python': [ 'mypy', 'pyls' ],
          \ 'ruby': [ 'solargraph' ],
          \ 'sh': [ 'language_server', 'shellcheck' ],
          \ 'vim': [ 'vint' ],
          \ 'vue': [ 'vls' ],
          \ }
  endif
  let g:ale_sh_shellcheck_options = '-x'
  let g:ale_go_golangci_lint_options = '--enable-all -D gochecknoglobals,gochecknoinits'
  let g:ale_go_golangci_lint_package = 1
  let g:ale_perl_perl_executable = '~/.plenv/shims/perl'
  let g:ale_python_pylint_change_directory = 0
  let g:ale_python_mypy_options = '--show-column-numbers --strict'
  let g:ale_python_mypy_detect_notes = 1
  let g:ale_set_loclist = 1
  nmap <silent> <A-K> <Plug>(ale_previous_wrap)
  nmap <silent> <A-J> <Plug>(ale_next_wrap)
"}}} '''
hook_post_update = '''
  !gem install --user-install rubocop solargraph
  !npm install -g bash-language-server eslint tslint prettier vue-language-server
  !pip3 install -U --user black vint python-language-server
'''
# }}}

[[plugins]]
repo      = 'ncm2/float-preview.nvim'
if        = 'has("nvim")'
on_source = ['deoplete.nvim']
hook_add = ''' "{{{
  let g:float_preview#docked = 0
  let g:float_preview#winhl = 'Normal:FloatPreview,NonText:FloatPreviewTransparent,EndOfBuffer:FloatPreviewTransparent'
  function! s:float_preview_win_open() abort
    call nvim_win_set_option(g:float_preview#win, 'colorcolumn', '')
    call nvim_win_set_option(g:float_preview#win, 'list', v:false)
    call nvim_win_set_option(g:float_preview#win, 'winblend', 30)
  endfunction
  autocmd User FloatPreviewWinOpen call s:float_preview_win_open()
"}}} '''

[plugins.ftplugin]
python = ''' "{{{
  nmap <buffer> <silent> K          <Plug>(ale_hover)
  nmap <buffer> <silent> gd         <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-]>      <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-w><C-]> <Plug>(ale_go_to_definition_in_split)
"}}} '''
ruby = ''' "{{{
  nmap <buffer> <silent> K          <Plug>(ale_hover)
  nmap <buffer> <silent> gd         <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-]>      <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-w><C-]> <Plug>(ale_go_to_definition_in_split)
"}}} '''
typescript = ''' "{{{
  nmap <buffer> <silent> K          <Plug>(ale_hover)
  nmap <buffer> <silent> gd         <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-]>      <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-w><C-]> <Plug>(ale_go_to_definition_in_split)
"}}} '''
vue = ''' "{{{
  nmap <buffer> <silent> K          <Plug>(ale_hover)
  nmap <buffer> <silent> gd         <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-]>      <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-w><C-]> <Plug>(ale_go_to_definition_in_split)
"}}} '''

[[plugins]]
repo      = 'wellle/tmux-complete.vim'
on_source = ['deoplete.nvim']
hook_add  = 'let g:tmuxcomplete#trigger = ""'
