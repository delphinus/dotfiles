# on_cmd {{{
[[plugins]]
repo       = 'Shougo/deol.nvim'
on_command = ['Deol']
on_map     = ['<Plug>(deol']
hook_add   = ''' "{{{
  let g:deol#enable_dir_changed = 0
  let g:deol#prompt_pattern = '^.\{-}❯❯❯ '

  tnoremap <BS><C-n> <C-\><C-n>
  function! s:open_deol() abort
    let winheight = &lines > 52 ? &lines / 4 * 3 : 40
    let winrow = &lines > winheight ? (&lines - winheight) / 2 : 0
    let winwidth = &columns > 240 ? &columns / 2 : 120
    let wincol = &columns > winwidth ? (&columns - winwidth) / 2 : 0
    execute 'Deol -split=floating -winwidth=' . winwidth '-winheight=' . winheight '-winrow=' . winrow '-wincol=' . wincol
  endfunction
  nnoremap <C-\><C-n> :<C-u>call <SID>open_deol()<CR>
  nnoremap <BS><C-n> :<C-u>call <SID>open_deol()<CR>
  tmap <A-z><A-z> <C-\><C-n><Plug>(deol_bg)
  nmap <A-z><A-z> <Plug>(deol_bg)
"}}} '''

[plugins.ftplugin]
deol = ''' "{{{
  if exists('t:deol') && t:deol.options.split ==# 'floating'
    let b:dwm_disabled = 1
  endif
  if exists('&winblend')
    setlocal winblend=30
  endif
"}}} '''

[[plugins]]
repo    = 'cocopon/colorswatch.vim'
on_func = ['colorswatch#']
on_cmd  = ['ColorSwatchGenerate']

[[plugins]]
#repo   = 'cocopon/inspecthi.vim'
repo   = 'delphinus/inspecthi.vim'
rev    = 'feature/neovim'
on_cmd = ['Inspecthi', 'InspecthiShowInspector', 'InspecthiHideInspector']
hook_add = ''' "{{{
  let g:inspecthi_floatwin_blend = 30
  let g:inspecthi_floatwin_hl = 'FloatPreview'
"}}} '''

[[plugins]]
repo     = 'dhruvasagar/vim-table-mode'
on_cmd   = ['TableModeToggle']
hook_add = 'nnoremap `tm :TableModeToggle<CR>'
hook_source = "let g:table_mode_corner = '|'"

[[plugins]]
repo   = 'fuenor/JpFormat.vim'
on_cmd = ['JpFormatAll', 'JpJoinAll']

[[plugins]]
repo     = 'lambdalisue/vim-gista'
on_cmd   = ['Gista']
on_func  = ['gista#']
hook_add = ''' "{{{
  let g:gista#command#list#enable_default_mappings = 0
  nnoremap gl :<c-u>Gista list<CR>
  nnoremap gL :<c-u>Gista list 
"}}} '''
hook_post_source = ''' "{{{
  function! s:gista_mappings() abort
    nmap <buffer> q <Plug>(gista-quit)
    nmap <buffer> <C-n> <Plug>(gista-next-mode)
    nmap <buffer> <C-p> <Plug>(gista-prev-mode)
    nmap <buffer> ? <Plug>(gista-toggle-mapping-visibility)
    nmap <buffer> <C-l> <Plug>(gista-redraw)
    "nmap <buffer> <F5>   <Plug>(gista-update)
    "nmap <buffer> <S-F5> <Plug>(gista-UPDATE)
    nmap <buffer> uu   <Plug>(gista-update)
    nmap <buffer> UU <Plug>(gista-UPDATE)
    map <buffer> <Return> <Plug>(gista-edit)
    map <buffer> ee <Plug>(gista-edit)
    map <buffer> EE <Plug>(gista-edit-right)
    map <buffer> tt <Plug>(gista-edit-tab)
    map <buffer> pp <Plug>(gista-edit-preview)
    map <buffer> ej <Plug>(gista-json)
    map <buffer> EJ <Plug>(gista-json-right)
    map <buffer> tj <Plug>(gista-json-tab)
    map <buffer> pj <Plug>(gista-json-preview)
    map <buffer> bb <Plug>(gista-browse-open)
    map <buffer> yy <Plug>(gista-browse-yank)
    map <buffer> rr <Plug>(gista-rename)
    map <buffer> RR <Plug>(gista-RENAME)
    map <buffer> df <Plug>(gista-remove)
    map <buffer> DF <Plug>(gista-REMOVE)
    map <buffer> dd <Plug>(gista-delete)
    map <buffer> DD <Plug>(gista-DELETE)
    map <buffer> ++ <Plug>(gista-star)
    map <buffer> -- <Plug>(gista-unstar)
    map <buffer> ff <Plug>(gista-fork)
    map <buffer> cc <Plug>(gista-commits)
  endfunction

  let apinames = gista#client#get_available_apinames()
  if index(apinames, 'GHE') == -1 && exists('g:gista_github_api_path')
    call gista#client#register('GHT', g:gista_github_api_path)
  endif
  autocmd User GistaList call <SID>gista_mappings()
"}}} '''

[[plugins]]
repo   = 'mbbill/undotree'
on_cmd = ['UndotreeToggle']
hook_add = ''' "{{{
  let g:undotree_HelpLine = 0
  let g:undotree_SetFocusWhenToggle = 1
  let g:undotree_ShortIndicators = 1
  let g:undotree_TreeNodeShape = '●'
  let g:undotree_WindowLayout = 2
  nnoremap <A-u> :UndotreeToggle<CR>
"}}} '''

[[plugins]]
repo     = 'norcalli/nvim-colorizer.lua'
on_cmd   = ['ColorizerAttachToBuffer', 'ColorizerDetachFromBuffer', 'ColorizerReloadAllBuffers']
if       = 'has("nvim")'
hook_add = ''' "{{{
  function! s:toggle_colorizer() abort
    if get(b:, 'colorizer_enabled', 0)
      ColorizerDetachFromBuffer
      let b:colorizer_enabled = 0
      echohl Debug
      echomsg 'colorizer.lua disabled'
      echohl None
    else
      ColorizerAttachToBuffer
      let b:colorizer_enabled = 1
      echohl Debug
      echomsg 'colorizer.lua enabled'
      echohl None
    endif
  endfunction
  nnoremap <silent> <A-C> :<C-u>call <SID>toggle_colorizer()<CR>
"}}} '''

[[plugins]]
repo   = 'powerman/vim-plugin-AnsiEsc'
on_cmd = ['AnsiEsc']

[[plugins]]
repo   = 'rhysd/ghpr-blame.vim'
on_cmd = ['GHPRBlame']
hook_source = '''
  source ~/.init-ghprblame.vim
  let g:ghpr_show_pr_mapping = 'ð'
  let g:ghpr_show_pr_in_message = 1
'''

[[plugins]]
repo   = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'
hook_add = ''' "{{{
  let g:git_messenger_no_default_mappings = v:true
  nnoremap <A-b> :GitMessenger<CR>
"}}} '''

[plugins.ftplugin]
gitmessengerpopup = ''' "{{{
  nmap <buffer> <A-b> o
  nmap <buffer> <C-c> q
  nmap <buffer> <C-i> O
  nmap <buffer> <C-o> o
  nmap <buffer> <CR>  q
  nmap <buffer> <Esc> q
"}}} '''

[[plugins]]
repo        = 'thinca/vim-fontzoom'
on_cmd      = ['Fontzoom']
on_map      = ['<Plug>(fontzoom-']
if          = '''has('gui')'''
hook_add    = ''' "{{{
  nmap <unique> <silent> + <Plug>(fontzoom-larger)
  nmap <unique> <silent> - <Plug>(fontzoom-smaller)
  nmap <unique> <silent> <C-ScrollWheelUp> <Plug>(fontzoom-larger)
  nmap <unique> <silent> <C-ScrollWheelDown> <Plug>(fontzoom-smaller)
"}}} '''
hook_source = 'let g:fontzoom_no_default_key_mappings = 1'

[[plugins]]
repo      = 'thinca/vim-prettyprint'
on_cmd    = ['PP', 'PrettyPrint']
on_source = ['capture.vim']

[[plugins]]
repo   = 'tyru/capture.vim'
on_cmd = ['Capture']

[[plugins]]
repo     = 'tyru/open-browser.vim'
on_cmd   = ['OpenBrowser', 'OpenBrowserSearch']
on_func  = ['openbrowser#open']
on_map   = ['<Plug>(openbrowser-']
hook_add = '''
  nmap g<CR> <Plug>(openbrowser-smart-search)
  vmap g<CR> <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo   = 'tweekmonster/startuptime.vim'
on_cmd = ['StartupTime']

[[plugins]]
repo   = 'vifm/vifm.vim'
on_cmd = ['EditVifm', 'VsplitVifm', 'SplitVifm', 'DiffVifm', 'TabVifm']
on_ft  = ['vifm']

# vim:se fdm=marker:
# }}}

# on_event {{{
[[plugins]]
repo = 'mhinz/vim-signify'
on_event = ['FocusLost', 'CursorHold']
hook_add = ''' "{{{
  let g:signify_vcs_list = ['git']
  let g:signify_realtime = 1
  let g:signify_sign_add = '✓'
  let g:signify_sign_delete = '✗'
  let g:signify_sign_delete_first_line = '↑'
  let g:signify_sign_change = '⤷'
  let g:signify_sign_changedelete = '•'

  omap ic <Plug>(signify-motion-inner-pending)
  xmap ic <Plug>(signify-motion-inner-visual)
  omap ac <Plug>(signify-motion-outer-pending)
  xmap ac <Plug>(signify-motion-outer-visual)
"}}} '''

[[plugins]]
repo     = 'delphinus/vim-emacscommandline'
on_event = ['CmdlineEnter']

[[plugins]]
repo     = 'delphinus/vim-unimpaired'
on_event = ['FocusLost', 'CursorHold']
hook_add = ''' "{{{
  nnoremap [w :<C-u>colder<CR>
  nnoremap ]w :<C-u>cnewer<CR>
  nnoremap [O :<C-u>lopen<CR>
  nnoremap ]O :<C-u>lclose<CR>
"}}} '''

[[plugins]]
repo     = 'itchyny/vim-cursorword'
on_event = ['FocusLost', 'CursorHold']

[plugins.ftplugin]
help = 'let b:cursorword = 0'

[[plugins]]
repo        = 'itchyny/vim-parenmatch'
on_event    = ['FocusLost', 'CursorHold']
hook_source = 'let g:loaded_matchparen = 1'
hook_post_source = 'call parenmatch#highlight()'

[[plugins]]
repo     = 'lambdalisue/suda.vim'
on_event = ['VimEnter']
hook_source = '''
  let g:suda_startup = 0
  let g:suda#prefix = 'sudo:'
  " do here instead of setting suda_smart_edit
  augroup suda_smart_edit
    autocmd!
    autocmd BufEnter * nested if stridx(expand('%'), $GOPATH) != 0 | call suda#BufEnter() | endif
  augroup END
'''
hook_post_source = '''
  call suda#init('sudo:*,sudo:*/*')
'''

[[plugins]]
repo    = 'machakann/vim-highlightedyank'
on_event = ['TextYankPost']

[[plugins]]
repo     = 'majutsushi/tagbar'
on_event = ['FocusLost', 'CursorHold']
hook_add = ''' "{{{
  let g:tagbar_left = 1
  let g:tagbar_autoclose = 1
  let g:tagbar_autofocus = 1
  let g:tagbar_show_linenumbers = 1
  let g:tagbar_iconchars = ["\ue5ff ", "\ue5fe "] "  , 
  let g:tagbar_autopreview = 1
  augroup TagbarWindow
    autocmd!
    autocmd BufWinEnter * if &previewwindow | setlocal nonumber norelativenumber | endif
  augroup END
  nmap <C-t> :<C-u>TagbarToggle<CR>
"}}} '''
# }}}

# on_ft {{{
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo  = 'dsawardekar/wordpress.vim'
on_ft = ['php']

[[plugins]]
repo        = 'fatih/vim-go'
on_ft       = ['go']
hook_source = ''' "{{{
  let g:go_addtags_transform = 'camelcase'
  let g:go_alternate_mode = 'split'
  let g:go_auto_sameids = 1
  let g:go_auto_type_info = 1
  let g:go_autodetect_gopath = 0
  " TODO: use deoplete-lsp instead of this
  let g:go_code_completion_enabled = 1
  let g:go_def_mapping_enabled = 1
  let g:go_doc_keywordprg_enabled = 1
  let g:go_doc_popup_window = 1
  let g:go_fmt_command = 'goimports'
  let g:go_fmt_experimental = 1
  let g:go_fmt_fail_silently = 1
  let g:go_fmt_options = {'gofmt': '-s'}
  let g:go_highlight_array_whitespace_error = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_chan_whitespace_error = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_generate_tags = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_space_tab_error = 1
  let g:go_highlight_types = 1
  let g:go_metalinter_autosave = 0
  let g:go_metalinter_deadline = '10s'
  let g:go_template_use_pkg = 1
  let g:go_updatetime = 1
"}}} '''
[plugins.ftplugin]
go = ''' "{{{
  if &background ==# 'light'
    hi! goSameId term=bold cterm=bold ctermbg=225 guibg=#eeeaec
  else
    hi! goSameId gui=bold term=bold ctermbg=23 ctermfg=7 guifg=#eee8d5 guibg=#00533f
  endif
"}}} '''

godoc = ''' "{{{
  setlocal colorcolumn=
  let b:auto_cursorline_disabled = 1
"}}} '''

[[plugins]]
repo  = 'junegunn/vader.vim'
on_ft = ['vader']

[[plugins]]
repo  = 'msanders/cocoa.vim'
on_ft = ['objc']

[[plugins]]
repo    = 'rhysd/vim-textobj-ruby'
depends = ['vim-textobj-user']
on_ft   = ['ruby']

[[plugins]]
repo  = 'rust-lang/rust.vim'
on_ft = ['rust']

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = [
    'lua', 'elixir', 'ruby', 'crystal', 'sh', 'zsh', 'vb', 'vbnet',
    'aspvbs', 'vim', 'c', 'cpp', 'xdefaults', 'objc', 'matlab',
  ]

[[plugins]]
repo  = 'delphinus/vim-rails'
rev   = 'feature/recognize-ridgepole'
on_ft = ['ruby']
# }}}

# on_map {{{
[[plugins]]
repo     = 'arecarn/vim-fold-cycle'
on_map   = ['<Plug>(fold-cycle-']
hook_add = ''' "{{{
  let g:fold_cycle_default_mapping = 0
  nmap <A-l> <Plug>(fold-cycle-open)
  nmap <A-h> <Plug>(fold-cycle-close)
"}}} '''

[[plugins]]
#repo      = 'bfredl/nvim-miniyank'
repo      = 'delphinus/nvim-miniyank'
rev       = 'feature/add-delete-action'
on_source = ['denite.nvim']
on_map    = ['<Plug>(miniyank-']
hook_add = ''' "{{{
  let g:miniyank_maxitems = 100
  map p <Plug>(miniyank-autoput)
  map P <Plug>(miniyank-autoPut)
  map <A-p> <Plug>(miniyank-cycle)
  map <A-P> <Plug>(miniyank-cycleback)
"}}} '''

[[plugins]]
repo     = 'chikatoike/concealedyank.vim'
on_map   = ['<Plug>(operator-concealedyank)']
hook_add = 'xmap Y <Plug>(operator-concealedyank)'

[[plugins]]
repo      = 'delphinus/dwm.vim'
rev       = 'feature/disable'
on_map    = ['<Plug>DWM']
hook_add  = ''' "{{{
  function! s:dwm_reset_pane_width() abort
    if !exists('*DWM_ResizeMasterPaneWidth')
      return
    endif
    let half = &columns / 2
    let min_width = get(g:, 'dwm_min_master_pane_width', 9999)
    let g:dwm_master_pane_width = min([min_width, half])
    call DWM_ResizeMasterPaneWidth()
  endfunction

  nnoremap <silent> <Plug>DWMResetPaneWidth :call <SID>dwm_reset_pane_width()<CR>
  nmap <A-r> <Plug>DWMResetPaneWidth

  nnoremap <C-j> <C-w>w
  nnoremap <C-k> <C-w>W
  nmap <C-s> <Plug>DWMRotateClockwise
  nmap <C-q> <Plug>DWMRotateCounterclockwise
  nmap <C-n> <Plug>DWMNew
  nmap <C-c> <Plug>DWMClose
  nmap <C-Space> <Plug>DWMFocus
  nmap <C-@> <Plug>DWMFocus
  nmap <A-CR> <Plug>DWMFocus
  nmap <C-l> <Plug>DWMGrowMaster
"}}} '''

[[plugins]]
repo   = 'delphinus/vim-tmux-copy'
on_map = ['<Plug>TmuxCopy']
if     = 'has("nvim")'
hook_add = '''
  let g:tmux_copy_map = 0
  map <A-[> <Plug>TmuxCopy>
'''

[[plugins]]
repo   = 'deton/jasegment.vim'
on_map = ['<Plug>JaSegment']
hook_add = ''' "{{{
  let g:jasegment_no_default_key_mappings = 1
"}}} '''

[plugins.ftplugin]
markdown = ''' "{{{
augroup JaSegmentHighlight
  autocmd!
  autocmd InsertLeave <buffer> call jasegment#OnInsertLeave()
augroup END
nmap <silent><buffer> e <Plug>JaSegmentMoveNE
nmap <silent><buffer> w <Plug>JaSegmentMoveNW
nmap <silent><buffer> b <Plug>JaSegmentMoveNB
omap <silent><buffer> e <Plug>JaSegmentMoveOE
omap <silent><buffer> w <Plug>JaSegmentMoveOW
omap <silent><buffer> b <Plug>JaSegmentMoveOB
xmap <silent><buffer> e <Plug>JaSegmentMoveVE
xmap <silent><buffer> w <Plug>JaSegmentMoveVW
xmap <silent><buffer> b <Plug>JaSegmentMoveVB
omap <silent><buffer> aw <Plug>JaSegmentTextObjA
omap <silent><buffer> iw <Plug>JaSegmentTextObjI
xmap <silent><buffer> aw <Plug>JaSegmentTextObjVA
xmap <silent><buffer> iw <Plug>JaSegmentTextObjVI
"}}} '''

[[plugins]]
repo     = 'iamcco/markdown-preview.vim'
on_map   = ['<Plug>MarkdownPreview', '<Plug>StopMarkdownPreview']
hook_source = '''
  let g:mkdp_path_to_chrome = 'open -a Safari'
'''

[plugins.ftplugin]
markdown = ''' "{{{
  nmap <buffer> <A-m> <Plug>MarkdownPreview
  nmap <buffer> <A-M> <Plug>StopMarkdownPreview
"}}} '''

[[plugins]]
repo        = 'junegunn/vim-easy-align'
on_map      = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
hook_add    = ''' "{{{
  vmap <Enter>           <Plug>(EasyAlign)
"}}} '''
hook_source = ''' "{{{
  let g:easy_align_delimiters = {
        \ '>': { 'pattern': '>>\|=>\|>' },
        \ '/': { 'pattern': '//\+\|/\*\|\*/', 'ignore_groups': ['String'] },
        \ '#': { 'pattern': '#\+', 'ignore_groups': ['String'], 'delimiter_align': 'l' },
        \ ']': {
        \     'pattern':       '[[\]]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ ')': {
        \     'pattern':       '[()]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ 'd': {
        \     'pattern': ' \(\S\+\s*[;=]\)\@=',
        \     'left_margin': 0,
        \     'right_margin': 0
        \   }
        \ }
"}}} '''

[[plugins]]
repo     = 'ripxorip/aerojump.nvim'
on_map   = ['<Plug>(Aerojump']
hook_add = ''' "{{{
  let g:aerojump_keymaps = {
    \ '<C-c>': 'AerojumpExit',
    \ }
  nmap # <Plug>(AerojumpBolt)
  nmap g# <Plug>(AerojumpFromCursorBolt)
  nmap <A-3> <Plug>(AerojumpSpace)
  nmap <A-#> <Plug>(AerojumpDefault)
"}}} '''

[[plugins]]
repo     = 't9md/vim-quickhl'
on_map   = ['<Plug>(quickhl-', '<Plug>(operator-quickhl-']
hook_add = ''' "{{{
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>t <Plug>(quickhl-manual-toggle)
  xmap <Space>t <Plug>(quickhl-manual-toggle)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
  nmap <Space>j <Plug>(quickhl-cword-toggle)
  nmap <Space>] <Plug>(quickhl-tag-toggle)
  map  <Space>H <Plug>(operator-quickhl-manual-this-motion)
"}}} '''

[[plugins]]
repo     = 't9md/vim-choosewin'
on_map   = ['<Plug>(choosewin)']
hook_add = 'nmap \ <Plug>(choosewin)'
hook_source = '''
  let g:choosewin_statusline_replace = 0
  let g:choosewin_overlay_enable = 1
'''

[[plugins]]
repo     = 'thinca/vim-visualstar'
on_map   = ['<Plug>(visualstar']
hook_add = ''' "{{{
  let g:visualstar_no_default_key_mappings = 1
  xmap <unique> * <Plug>(visualstar-*)
"}}} '''

[[plugins]]
repo     = 'easymotion/vim-easymotion'
on_cmd   = ['EMCommandLineMap', 'EMCommandLineNoreMap', 'EMCommandLineUnMap']
on_map   = ['<Plug>(easymotion-']
hook_add = ''' "{{{
  map ' <Plug>(easymotion-prefix)
  nmap s <Plug>(easymotion-overwin-f2)
  xmap s <Plug>(easymotion-s2)
  omap s <Plug>(easymotion-s2)
"}}} '''
hook_source = ''' "{{{
  let g:EasyMotion_keys = 'hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
  let g:EasyMotion_grouping =1
  let g:EasyMotion_use_migemo = 1
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
"}}} '''

[[plugins]]
repo    = 'inkarkat/vim-LineJuggler'
depends = [
  'vim-repeat',
  'vim-ingo-library',
  'visualrepeat',
]
on_map   = ['<Plug>(LineJuggler']
hook_add = ''' "{{{
  xmap [d       <Plug>(LineJugglerDupOverUp)
  nmap [d       <Plug>(LineJugglerDupOverUp)
  xmap [E       <Plug>(LineJugglerSwapUp)
  nmap [E       <Plug>(LineJugglerSwapUp)
  xmap [e       <Plug>(LineJugglerMoveUp)
  nmap [e       <Plug>(LineJugglerMoveUp)
  xmap [<Space> <Plug>(LineJugglerBlankUp)
  nmap [<Space> <Plug>(LineJugglerBlankUp)
  xmap ]d       <Plug>(LineJugglerDupOverDown)
  nmap ]d       <Plug>(LineJugglerDupOverDown)
  xmap ]E       <Plug>(LineJugglerSwapDown)
  nmap ]E       <Plug>(LineJugglerSwapDown)
  xmap ]e       <Plug>(LineJugglerMoveDown)
  nmap ]e       <Plug>(LineJugglerMoveDown)
  xmap ]<Space> <Plug>(LineJugglerBlankDown)
  nmap ]<Space> <Plug>(LineJugglerBlankDown)
"}}} '''
# }}}

# on_func {{{
[[plugins]]
repo    = 'sainnhe/artify.vim'
on_func = ['Artify']
# }}}

# dependencies {{{
[[plugins]]
repo = 'vim-jp/vital.vim'
on_func = ['vital#vital#new']

[[plugins]]
repo = 'vim-scripts/visualrepeat'
# }}}

# vim:se fdm=marker:
